namesZs
debugSource("~/Documents/Research/Bayesian MAM/BMAM/R/conditional_brms.R")
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
plot(bmam)
bmam
names1
names2<- variables[grep(pattern = paste0("zs_",as.character(i),"_\\d *"), variables)]
names2
variables[grep(pattern = paste0("^s_s *"), variables)]
as.character(smterm[[2]][[i+1]][[2]])
as.character(smterm[[2]][[i+1]][[2]])
source("~/Documents/Research/Bayesian MAM/BMAM/R/summary.R")
bmam
bmam
names2
names2<- variables[grep(pattern = paste0("^s_s",as.character(smterm[[2]][[i+1]][[2]]),"_\\d *"), variables)]
names2
source("~/Documents/Research/Bayesian MAM/BMAM/R/summary.R")
bmam
bmam
ss <- summary(bmam)
ss$Conditional_Model$Smooth
plot(bmam)
plot(bmam, smooth.function = fun)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
plot(bmam)
bmam$Centered
fun(preddat[[var]][index])
values <- 1:100
ones <- matrix(rep(1,nrow(values)))
nrow(values)
ones <- matrix(rep(1,length(values)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,nrow(pred_B)) - H_matrix
pred_B <- M_matrix %*% values
M_matrix <- diag(1,nrow(pred_B)) - H_matrix
ones <- matrix(rep(1,length(values)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,length(values)) - H_matrix
pred_B <- M_matrix %*% values
projection <- function(values){
if(x$Centered){
ones <- matrix(rep(1,length(values)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,length(values)) - H_matrix
pred_B <- M_matrix %*% values
}else{
values
}
}
## function for center the fitted value
projection <- function(values){
if(x$Centered){
ones <- matrix(rep(1,length(values)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,length(values)) - H_matrix
pred_B <- M_matrix %*% values
}else{
values
}
}
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam, smooth.function = fun)
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam, smooth.function = fun)
bmam$Centered
plot(bmam, smooth.function = fun)
plot(bmam)
bmam <- bmam(object = model_brms, centered = F,
k=100, CIType="ETI", CI = 0.95)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = F,
k=100, CIType="ETI", CI = 0.95)
plot(bmam)
plot(bmam, smooth.function = fun)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
bmam$Centered
center <- function(x){
if(bmam$Centered) x <- x - mean(x)
return(x)
}
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam)
plot(bmam, smooth.function = fun)
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam, smooth.function = fun)
source("~/Documents/Research/Bayesian MAM/BMAM/R/conditional_brms.R")
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2), smooths_only = TRUE,
...)
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2), smooths_only = TRUE）
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),
...)
CI《- 0.95
CI<- 0.95
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),
...)
dim(yhat)
# projection
# the same as  sweep(pred_B,2,colMeans(pred_B),'-')
ones <- matrix(rep(1,nrow(yhat)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,nrow(yhat)) - H_matrix
M_matrix %*% yhat
tmp1 <- M_matrix %*% yhat
object <- restructure(object)
prep <- prepare_predictions(
object, newdata = data, re_formula = NA,
check_response = FALSE)
## Xs: basis function for smooth term, without penalty (ncol = 1)
pred_Xs <- prep$dpars$mu$sm$fe$Xs
## Zs: basis function for smooth term (ncol = k-2)
pred_Zs <- sapply(prep$dpars$mu$sm$re, function(re.)re.$Zs)
pred_Zs <- do.call(cbind, pred_Zs)
## X: linear term, for example intercept + x1 + x2 + x1:x2
pred_X <- prep$dpars$mu$fe$X
pred_B <- cbind(pred_X, pred_Xs, pred_Zs)
if(centered) pred_B <- sweep(pred_B,2,colMeans(pred_B),'-') # Return centered smooths.
## get beta from brms
## names of variables
post <- as_draws_matrix(object) # posterior samples
variables <- variables(object) # variable names
namesX <- variables[grep(pattern = "b_ *", variables)]
namesXs <- variables[grep(pattern = paste0("bs_s *"), variables)]
namesZs <- variables[grep(pattern = paste0("^s_s *"), variables)]
names <- c(namesX, namesXs, namesZs)
## beta
beta <- post[,names]
tmp2 <- Predicted <- pred_B %*% t(beta)
debugSource("~/Documents/Research/Bayesian MAM/BMAM/R/conditional_brms.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
tmp1
M_matrix
tmp1 <- M_matrix %*% yhat
object <- restructure(object)
prep <- prepare_predictions(
object, newdata = data, re_formula = NA,
check_response = FALSE)
## Xs: basis function for smooth term, without penalty (ncol = 1)
pred_Xs <- prep$dpars$mu$sm$fe$Xs
## Zs: basis function for smooth term (ncol = k-2)
pred_Zs <- sapply(prep$dpars$mu$sm$re, function(re.)re.$Zs)
pred_Zs <- do.call(cbind, pred_Zs)
## X: linear term, for example intercept + x1 + x2 + x1:x2
pred_X <- prep$dpars$mu$fe$X
pred_B <- cbind(pred_X, pred_Xs, pred_Zs)
if(centered) pred_B <- sweep(pred_B,2,colMeans(pred_B),'-') # Return centered smooths.
centered
## get beta from brms
## names of variables
post <- as_draws_matrix(object) # posterior samples
variables <- variables(object) # variable names
namesX <- variables[grep(pattern = "b_ *", variables)]
namesXs <- variables[grep(pattern = paste0("bs_s *"), variables)]
namesZs <- variables[grep(pattern = paste0("^s_s *"), variables)]
names <- c(namesX, namesXs, namesZs)
## beta
beta <- post[,names]
tmp2 <- Predicted <- pred_B %*% t(beta)
View(tmp2)
View(tmp1)
tmp1 <- M_matrix %*% yhat
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),
...)
CI <- 0.95
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),
...)
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),
...)
CI <- 0.95
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),
...)
dim(yhat)
?fitted.brmsfit
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
CI <- 0.95
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),summary=FALSE,
...)
# projection
# the same as  sweep(pred_B,2,colMeans(pred_B),'-')
ones <- matrix(rep(1,nrow(yhat)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,nrow(yhat)) - H_matrix
tmp1 <- M_matrix %*% yhat
View(tmp1)
dim(tmp1)
predicted <- M_matrix %*% yhat
tmp1 <- as.data.table(do.call(rbind, apply(predicted, 1, bsummary, ...)))
object <- restructure(object)
prep <- prepare_predictions(
object, newdata = data, re_formula = NA,
check_response = FALSE)
## Xs: basis function for smooth term, without penalty (ncol = 1)
pred_Xs <- prep$dpars$mu$sm$fe$Xs
## Zs: basis function for smooth term (ncol = k-2)
pred_Zs <- sapply(prep$dpars$mu$sm$re, function(re.)re.$Zs)
pred_Zs <- do.call(cbind, pred_Zs)
## X: linear term, for example intercept + x1 + x2 + x1:x2
pred_X <- prep$dpars$mu$fe$X
pred_B <- cbind(pred_X, pred_Xs, pred_Zs)
centered
if(centered) pred_B <- sweep(pred_B,2,colMeans(pred_B),'-') # Return centered smooths.
object <- restructure(object)
prep <- prepare_predictions(
object, newdata = data, re_formula = NA,
check_response = FALSE)
## Xs: basis function for smooth term, without penalty (ncol = 1)
pred_Xs <- prep$dpars$mu$sm$fe$Xs
## Zs: basis function for smooth term (ncol = k-2)
pred_Zs <- sapply(prep$dpars$mu$sm$re, function(re.)re.$Zs)
pred_Zs <- do.call(cbind, pred_Zs)
## X: linear term, for example intercept + x1 + x2 + x1:x2
pred_X <- prep$dpars$mu$fe$X
pred_B <- cbind(pred_X, pred_Xs, pred_Zs)
pred_B <- sweep(pred_B,2,colMeans(pred_B),'-')
## get beta from brms
## names of variables
post <- as_draws_matrix(object) # posterior samples
variables <- variables(object) # variable names
namesX <- variables[grep(pattern = "b_ *", variables)]
namesXs <- variables[grep(pattern = paste0("bs_s *"), variables)]
namesZs <- variables[grep(pattern = paste0("^s_s *"), variables)]
names <- c(namesX, namesXs, namesZs)
## beta
beta <- post[,names]
Predicted <- pred_B %*% t(beta)
## return
tmp2 <- as.data.table(do.call(rbind, apply(Predicted, 1, bsummary, ...)))
View(tmp1)
View(tmp2)
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),summary=FALSE,
...)
# projection
# the same as  sweep(pred_B,2,colMeans(pred_B),'-')
ones <- matrix(rep(1,nrow(yhat)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,nrow(yhat)) - H_matrix
predicted <- M_matrix %*% yhat
tmp1 <- as.data.table(do.call(rbind, apply(predicted, 2, bsummary, ...)))
View(tmp1)
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),summary=FALSE,
...)
dim(yhat)
# projection
# the same as  sweep(pred_B,2,colMeans(pred_B),'-')
ones <- matrix(rep(1,nrow(yhat)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,nrow(yhat)) - H_matrix
dim(M_matrix)
nrow(yhat)
dim(yhat)
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),summary=FALSE,
...)
# projection
# the same as  sweep(pred_B,2,colMeans(pred_B),'-')
ones <- matrix(rep(1,ncol(yhat)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,ncol(yhat)) - H_matrix
predicted <- M_matrix %*% yhat
dim(yhat)
dim(M_matrix)
predicted <- M_matrix %*% t(yhat)
dim(predicted)
tmp1 <- as.data.table(do.call(rbind, apply(predicted, 2, bsummary, ...)))
dim(tmp1)
tmp1 <- as.data.table(do.call(rbind, apply(predicted, 1, bsummary, ...)))
View(tmp1)
View(tmp1)
source("~/Documents/Research/Bayesian MAM/BMAM/R/conditional_brms.R")
source("~/Documents/Research/Bayesian MAM/BMAM/R/conditional_brms.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
plot(bmam)
bmam <- bmam(object = model_brms, centered = F,
k=100, CIType="ETI", CI = 0.95)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = F,
k=100, CIType="ETI", CI = 0.95)
plot(bmam)
debugSource("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam, smooth.function = fun)
truevalue <- fun(preddat[[var]])
truevalue
bmam$Centered
bmam$Centered <- TRUE
# projection
ones <- matrix(rep(1,length(truevalue)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,length(truevalue)) - H_matrix
dim(truevalue)
M_matrix %*% t(truevalue)
truevalue <- M_matrix %*% truevalue
truevalue
debugSource("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
debugSource("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
undebug(plot.bmam)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam, smooth.function = fun)
plot(bmam, smooth.function = fun)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = F,
k=100, CIType="ETI", CI = 0.95)
plot(bmam, smooth.function = fun)
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
plot(bmam,smooth.function = fun)
bmam$Centered
truevalue <- rnorm(100)
# projection
ones <- matrix(rep(1,length(truevalue)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,length(truevalue)) - H_matrix
truevalue1 <- M_matrix %*% truevalue
View(truevalue)
truevalue - mean(truevalue)
truevalue1
truevalue1 - truevalue
mean(truevalue)
bmam$Centered
1||F
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam,smooth.function = fun)
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam,smooth.function = fun)
## import libraries
library(mam)
library(mgcv)
library(ggplot2)
library(mgcv)
library(brms)
library(data.table)
library(brmsmargins)
library(dplyr)
source("R/bmam.R")
source("R/prediction.R")
source("R/generate_pred.R")
source("R/plot.bmam.R")
source("R/summary.R")
source("R/conditional_brms.R")
### data ################
library(mam)
library(mgcv)
library(gamm4)
library(tidyverse)
library(brms)
library(brmsmargins)
library(data.table)
source("R/bmam.R")
source("R/prediction.R")
source("R/generate_pred.R")
source("R/SimData.R")
source("R/summary.R")
source("R/plot.bmam.R")
source("R/conditional_brms.R")
### generate data #######################
set.seed(4321)
simdata <- SimData(100,10)
dat <- simdata$data
fun <- simdata$f
load("data/simu_brms.rds")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
cache = TRUE,
fig.width = 5,
fig.height = 3.5
)
knitr::opts_knit$set(root.dir = "/Users/pantianyi/Documents/Research/Bayesian MAM/BMAM")
bmam.summary <- summary(bmam)
source("~/Documents/Research/Bayesian MAM/BMAM/R/summary.R")
summary(bmam)
summary(bmam, plot_smooth = F)
summary(bmam)
list(...)
is.null(list(...))
length(list(...))
a <- list(a = 1)
a
length(a)
a <- list(a = 1, b =2)
length(a)
source("~/Documents/Research/Bayesian MAM/BMAM/R/summary.R")
summary(bmam)
bmam.summary <- summary(bmam)
source("R/*.R")
source("~/Documents/Research/Bayesian MAM/BMAM/R/summary.R")
bmam
summary(bmam)
summary(model_brms)
source("~/Documents/Research/Bayesian MAM/BMAM/R/summary.R")
bmam
summary(bmam)
bmam.summary <- summary(bmam)
bmam.summary <- summary(bmam, plot_smooth = TRUE)
knitr::kable(bmam.summary$BMAM$Smooth)
knitr::kable(bmam.summary$BMAM$Smooth)
knitr::kable(bmam.summary$Conditional_Model$Smooth)
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam)
plot(bmam, conditional = F)
plot(bmam)
plot(bmam, smooth.function = simdata$f)
library(mam)
library(mgcv)
library(mam)
library(mgcv)
set.seed(4321)
simdata <- SimData(K = 100, Nk = 10)
dat <- simdata$data
fun <- simdata$f
head(dat, digits = 3)
?head
## source code
source("R/bmam.R")
source("R/conditional_brms.R")
source("R/prediction.R")
source("R/generate_pred.R")
source("R/plot.bmam.R")
source("R/summary.R")
source("R/SimData.R")
bmam.fit.centered <- bmam(object = model_brms, k=100, CIType="ETI", CI = 0.95, centered = TRUE)
themam.centered <- mam(smooth = list(s(x1),s(x2)),
re = y ~ (1+x3|id),
fe = ~ x3,
dat = dat,
margdat = dat,
preddat = bmam.fit$Preddat,
control = mam_control(
centered = TRUE,
method = 'trust',
varmethod = 1,
verbose = FALSE,
retcond = TRUE))
themam.centered <- mam(smooth = list(s(x1),s(x2)),
re = y ~ (1+x3|id),
fe = ~ x3,
dat = dat,
margdat = dat,
preddat = bmam.fit.centered$Preddat,
control = mam_control(
centered = TRUE,
method = 'trust',
varmethod = 1,
verbose = FALSE,
retcond = TRUE))
plot(bmam.fit.centered, compared.model = themam.centered)
plot(bmam.fit)
bmam.fit <- bmam(object = model_brms, k=100, CIType="ETI", CI = 0.95)
bmam.summary <- summary(bmam.fit)
bmam.summary <- summary(bmam.fit, plot_smooth = TRUE)
plot(bmam.fit)
plot(bmam.fit, smooth.function = simdata$f)

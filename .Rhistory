if(is.factor(x)) factor(levels(x)[1],levels=levels(x))
lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) 0
})
lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) 0
})
fevariable
lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) 0
})
lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) 0
})
fevariable
is.list(fevariable)
list(fevariable)
is.list(feterm)
fevariable <- if(is.list(feterm),feterm, list(feterm))
fevariable <- ifelse(is.list(feterm),feterm, list(feterm))
fevariable
lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) 0
})
fevariable
var <- fevariable[[1]]
x <- mf[[var]]
x
is.factor(x)
factor(levels(x)[1],levels=levels(x))
if(is.factor(x)) factor(levels(x)[1],levels=levels(x))
is.numeric(x)
lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
})
fevariable <- ifelse(is.list(feterm),feterm, list(feterm))
lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
x_pred
})
## fix effect term
feterm <- brmsterms(object$formula)$dpars$mu$fe[[2]][-1]
if(feterm[[1]] == 1) feterm <- feterm[[-1]] # delete the intercept
fevariable <- feterm
lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
x_pred
})
fevariable <- feterm
lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
sm_pred <- lapply(smvariable, function(var){
x <- mf[[var]]
x <- x[which(x!=0)] # remove 0
x.max <- max(x)
x.min <- min(x)
seq(x.min, x.max, length = length)
})
fe_pred <- lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
if(feterm[[1]] == 1) feterm <- feterm[[-1]] # delete the intercept
if(!is.null(feterm)){
fevariable <- feterm
fe_pred <- lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
}
## fix effect term
feterm <- brmsterms(object$formula)$dpars$mu$fe[[2]][-1]
if(feterm[[1]] == 1) feterm <- feterm[[-1]] # delete the intercept
if(!is.null(feterm)){
fevariable <- feterm
fe_pred <- lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
}
fe_pred
fe_pred <- do.call("cbind", fe_pred)
fe_pred
fe_pred <- lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
fe_pred <- do.call("rbind.data.frame", fe_pred)
fe_pred
fe_pred <- lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
if(!is.null(feterm)){
fevariable <- feterm
fe_pred <- lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
}
fe_pred <- do.call("cbind.data.frame", fe_pred)
fe_pred
## fix effect term
feterm <- brmsterms(object$formula)$dpars$mu$fe[[2]][-1]
if(feterm[[1]] == 1) feterm <- feterm[[-1]] # delete the intercept
if(!is.null(feterm)){
fevariable <- feterm
fe_pred <- lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
}
fe_pred
fe_pred <- do.call("cbind.data.frame", fe_pred)
fe_pred
## fix effect term
feterm <- brmsterms(object$formula)$dpars$mu$fe[[2]][-1]
if(feterm[[1]] == 1) feterm <- feterm[[-1]] # delete the intercept
if(!is.null(feterm)){
fevariable <- feterm
fe_pred <- lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
}
## fix effect term
feterm <- brmsterms(object$formula)$dpars$mu$fe[[2]][-1]
if(feterm[[1]] == 1) feterm <- feterm[[-1]] # delete the intercept
if(!is.null(feterm)){
fevariable <- feterm
fe_pred <- sapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
}
fe_pred
?lapply
fe_pred <- lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
fe_pred
fe_pred
fe_pred
sm_pred
names(sm_pred)
smvariable
names(sm_pred) <- smvariable
names(sm_pred)
sm_pred <- do.call("cbind.data.frame", sm_pred)
sm_pred
sm_pred <- lapply(smvariable, function(var){
x <- mf[[var]]
x <- x[which(x!=0)] # remove 0
x.max <- max(x)
x.min <- min(x)
seq(x.min, x.max, length = length)
})
names(sm_pred) <- smvariable
pred <-
fe_pred <- do.call("cbind.data.frame", fe_pred)
fe_pred
bind_rows(fe_pred, .id = "column_label")
pred <-
fe_pred <- do.call("cbind.data.frame", fe_pred)
## fix effect term
feterm <- brmsterms(object$formula)$dpars$mu$fe[[2]][-1]
if(feterm[[1]] == 1) feterm <- feterm[[-1]] # delete the intercept
if(!is.null(feterm)){
fevariable <- feterm
fe_pred <- lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
}
# bind_rows(list_of_dataframes, .id = "column_label")
# pred <-
fe_pred <- do.call("cbind.data.frame", fe_pred)
fe_pred$`structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, `
## fix effect term
feterm <- brmsterms(object$formula)$dpars$mu$fe[[2]][-1]
if(feterm[[1]] == 1) feterm <- feterm[[-1]] # delete the intercept
if(!is.null(feterm)){
fevariable <- feterm
fe_pred <- lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
}
names(fe_pred) <- fevariable
fevariable
names(fe_pred)
names(fe_pred) <- fevariable
## fix effect term
feterm <- brmsterms(object$formula)$dpars$mu$fe[[2]][-1]
if(feterm[[1]] == 1) feterm <- feterm[[-1]] # delete the intercept
if(!is.null(feterm)){
fevariable <- feterm
fe_pred <- lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
names(fe_pred) <- fevariable
}
smvariable
fevariable
names(fe_pred)
fe_pred
names(fe_pred) <- list(fevariable)
names(fe_pred)
fe_pred
fe_pred <- do.call("cbind.data.frame", fe_pred)
fe_pred
smvariable
feterm
sm_pred
sm_pred <- do.call("cbind.data.frame", sm_pred)
sm_pred
View(beaverspred)
sm_pred
pred_data <- cbind(sm_pred, fe_pred)
pred_data
sm_pred[[-var]]
sm_pred[[var]]
var <- smvariable[[1]]
var
sm_pred[[var]]
sm_pred[[-var]]
sm_pred
sm_pred[var]
var
sm_pred[,var]
sm_pred[,as.character(var)]
sm_pred[,-as.character(var)]
sm_pred_design <- sm_pred
sm_pred_design <- sm_pred; sm_pred_design <- 0
sm_pred_design
sm_pred_design <- sm_pred
sm_pred_design
sm_pred_design <- sm_pred; sm_pred_design[,] <- 0
sm_pred_design
sm_pred_design[[var]]
sm_pred_design[[var]] <- sm_pred[[var]]
sm_pred_design
pred_data_design <- cbind(sm_pred_design, fe_pred)
pred_data_design
lapply(smvariable, function(var){
sm_pred_design <- sm_pred; sm_pred_design[,] <- 0
sm_pred_design[[var]] <- sm_pred[[var]]
pred_data_design <- cbind(sm_pred_design, fe_pred)
})
lapply(smvariable, function(var){
sm_pred_design <- sm_pred; sm_pred_design[,] <- 0
sm_pred_design[[var]] <- sm_pred[[var]]
cbind(sm_pred_design, fe_pred)
})
preddat <- lapply(smvariable, function(var){
sm_pred_design <- sm_pred; sm_pred_design[,] <- 0
sm_pred_design[[var]] <- sm_pred[[var]]
cbind(sm_pred_design, fe_pred)
})
preddat <- do.call("rbind",preddat)
preddat
generate_pred <- function(object, length = 100){
mf <- model.frame(object) # data in object
## smooth term
smterm <- brmsterms(object$formula)$dpars$mu$sm # smooth term
stopifnot(!is.null(smterm)) # check
smvariable <- lapply(smterm[[2]][-1], function(term.) term.[[2]]) # variable for smooth term
sm_pred <- lapply(smvariable, function(var){
x <- mf[[var]]
x <- x[which(x!=0)] # remove 0
x.max <- max(x)
x.min <- min(x)
seq(x.min, x.max, length = length)
})
names(sm_pred) <- smvariable
sm_pred <- do.call("cbind.data.frame", sm_pred)
## fix effect term
feterm <- brmsterms(object$formula)$dpars$mu$fe[[2]][-1]
if(feterm[[1]] == 1) feterm <- feterm[[-1]] # delete the intercept
if(!is.null(feterm)){
fevariable <- feterm
fe_pred <- lapply(fevariable, function(var){
x <- mf[[var]]
if(is.factor(x)) x_pred <- factor(levels(x)[1],levels=levels(x))
if(is.numeric(x)) x_pred <- 0
rep(x_pred, length = length)
})
names(fe_pred) <- list(fevariable)
fe_pred <- do.call("cbind.data.frame", fe_pred)
}else{
fe_pred <- NULL
}
preddat <- lapply(smvariable, function(var){
sm_pred_design <- sm_pred; sm_pred_design[,] <- 0
sm_pred_design[[var]] <- sm_pred[[var]]
cbind(sm_pred_design, fe_pred)
})
preddat <- do.call("rbind",preddat)
return(preddat)
}
preddat <- generate_pred(brms_model, length = 100)
beaverspred <- generate_pred(brms_model, length = 100)
mc <- marginalcoef(object = brms_model, fullbayesian = F, centered = TRUE,
preddat = beaverspred, CI = 0.95, CIType="ETI", posterior = T)
source("integretere_fullbayesian.R")
beaverspred
## MAM
bv.mam <- mam(
smooth = list(s(timeF),s(timeM)),
re = y ~ (sex0-1|id)+(sex1-1|id),
fe=~year,#+sex
dat = beavers,
margdat = beavers,
preddat = beaverspred,
control = mam_control(
centered=TRUE,
method = 'trust',
varmethod = 1,
verbose = TRUE,
retcond = TRUE
)
)
### plot ##################
## plot set up
library(gridExtra)
library(patchwork)
GGPLOTTEXTSIZE <- 15
PLOTWIDTH <- PLOTHEIGHT <- 7
myrange=c(-2,3.2)
theme_set(theme_bw())
theme_replace(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
## data prepare
bv.mam.uci <- bv.mam$mam$fitted+1.96*bv.mam$mam$fitted_se
bv.mam.lci <- bv.mam$mam$fitted-1.96*bv.mam$mam$fitted_se
dfplotF <- data.frame(time = rep(beaverspred$time[101:200],2),
fitted = c(mc$Predicted_Summary$M[101:200],bv.mam$mam$fitted[101:200]),
uci = c(mc$Predicted_Summary$UL[101:200], bv.mam.uci[101:200]),
lci = c(mc$Predicted_Summary$LL[101:200], bv.mam.lci[101:200]),
Method = rep(c("BMAM", "MAM"), each = 100))
dfplotM <- data.frame(time = rep(beaverspred$time[1:100],2),
fitted = c(mc$Predicted_Summary$M[1:100],bv.mam$mam$fitted[1:100]),
uci = c(mc$Predicted_Summary$UL[1:100], bv.mam.uci[1:100]),
lci = c(mc$Predicted_Summary$LL[1:100], bv.mam.lci[1:100]),
Method = rep(c("BMAM", "MAM"), each = 100))
beaverspred
# Create the prediction data
beaverspred <- data.frame(time=rep(seq(min(beavers$time),max(beavers$time),length=100),2),
timeM=c(seq(min(beavers$time),max(beavers$time),length=100),rep(0,100)),
timeF=c(rep(0,100),seq(min(beavers$time),max(beavers$time),length=100)),
year=factor(levels(beavers$year)[1],levels=levels(beavers$year)),
sex=factor(rep(c("M","F"),each=100),levels=levels(beavers$sex)))
beaverspred
# Create the prediction data
beaverspred <- data.frame(time=rep(seq(min(beavers$time),max(beavers$time),length=100),2),
timeM=c(seq(min(beavers$time),max(beavers$time),length=100),rep(0,100)),
timeF=c(rep(0,100),seq(min(beavers$time),max(beavers$time),length=100)),
year=factor(levels(beavers$year)[1],levels=levels(beavers$year)),
sex=factor(rep(c("M","F"),each=100),levels=levels(beavers$sex)))
beaverspred <- generate_pred(brms_model, length = 100)
## data prepare
bv.mam.uci <- bv.mam$mam$fitted+1.96*bv.mam$mam$fitted_se
bv.mam.lci <- bv.mam$mam$fitted-1.96*bv.mam$mam$fitted_se
beaverspred$time[101:200]
dfplotF <- data.frame(time = rep(beaverspred$timeF,2),
fitted = c(mc$Predicted_Summary$M[101:200],bv.mam$mam$fitted[101:200]),
uci = c(mc$Predicted_Summary$UL[101:200], bv.mam.uci[101:200]),
lci = c(mc$Predicted_Summary$LL[101:200], bv.mam.lci[101:200]),
Method = rep(c("BMAM", "MAM"), each = 100))
dfplotF <- data.frame(time = rep(beaverspred$timeF[101:200],2),
fitted = c(mc$Predicted_Summary$M[101:200],bv.mam$mam$fitted[101:200]),
uci = c(mc$Predicted_Summary$UL[101:200], bv.mam.uci[101:200]),
lci = c(mc$Predicted_Summary$LL[101:200], bv.mam.lci[101:200]),
Method = rep(c("BMAM", "MAM"), each = 100))
dfplotM <- data.frame(time = rep(beaverspred$timeM[1:100],2),
fitted = c(mc$Predicted_Summary$M[1:100],bv.mam$mam$fitted[1:100]),
uci = c(mc$Predicted_Summary$UL[1:100], bv.mam.uci[1:100]),
lci = c(mc$Predicted_Summary$LL[1:100], bv.mam.lci[1:100]),
Method = rep(c("BMAM", "MAM"), each = 100))
## plot
ggF <- ggplot(data=dfplotF,aes(x=time,y=fitted, group=Method))+
geom_ribbon(aes(ymin=lci,ymax=uci,fill=Method, colour= Method),alpha=0.2, size = 0.3)+
geom_line(aes(colour = Method), size = 1)+
ylim(myrange)+
xlab("Day of Year")+
ylab(expression(f^M~(time)))+
ggtitle("Female") +
theme(text = element_text(size = GGPLOTTEXTSIZE))
ggF
beaverspred$timeF[101:200]
beaverspred$timeF
dfplotF <- data.frame(time = rep(beaverspred$timeM[101:200],2),
fitted = c(mc$Predicted_Summary$M[101:200],bv.mam$mam$fitted[101:200]),
uci = c(mc$Predicted_Summary$UL[101:200], bv.mam.uci[101:200]),
lci = c(mc$Predicted_Summary$LL[101:200], bv.mam.lci[101:200]),
Method = rep(c("BMAM", "MAM"), each = 100))
dfplotM <- data.frame(time = rep(beaverspred$timeF[1:100],2),
fitted = c(mc$Predicted_Summary$M[1:100],bv.mam$mam$fitted[1:100]),
uci = c(mc$Predicted_Summary$UL[1:100], bv.mam.uci[1:100]),
lci = c(mc$Predicted_Summary$LL[1:100], bv.mam.lci[1:100]),
Method = rep(c("BMAM", "MAM"), each = 100))
## plot
ggF <- ggplot(data=dfplotF,aes(x=time,y=fitted, group=Method))+
geom_ribbon(aes(ymin=lci,ymax=uci,fill=Method, colour= Method),alpha=0.2, size = 0.3)+
geom_line(aes(colour = Method), size = 1)+
ylim(myrange)+
xlab("Day of Year")+
ylab(expression(f^M~(time)))+
ggtitle("Female") +
theme(text = element_text(size = GGPLOTTEXTSIZE))
ggF
ggM <- ggplot(data=dfplotM,aes(x=time,y=fitted, group=Method))+
geom_ribbon(aes(ymin=lci,ymax=uci,fill=Method, colour= Method),alpha=0.2, size = 0.3)+
geom_line(aes(colour = Method), size = 1)+
ylim(myrange)+
xlab("Day of Year")+
ylab(expression(f^M~(time)))+
ggtitle("Male") +
theme(text = element_text(size = GGPLOTTEXTSIZE))
ggM
mc <- marginalcoef(object = brms_model, fullbayesian = F, centered = TRUE,
CI = 0.95, CIType="ETI", posterior = T)
source("marginalcoef.R")
source("prediction.R")
source("builder.R")
source("generate_pred.R")
source("marginalcoef.R")
source("prediction.R")
source("builder.R")
source("generate_pred.R")
source("integretere_fullbayesian.R")
mc <- marginalcoef(object = brms_model, fullbayesian = F, centered = TRUE,
CI = 0.95, CIType="ETI", posterior = T)
## data prepare
bv.mam.uci <- bv.mam$mam$fitted+1.96*bv.mam$mam$fitted_se
bv.mam.lci <- bv.mam$mam$fitted-1.96*bv.mam$mam$fitted_se
dfplotF <- data.frame(time = rep(beaverspred$timeM[101:200],2),
fitted = c(mc$Predicted_Summary$M[101:200],bv.mam$mam$fitted[101:200]),
uci = c(mc$Predicted_Summary$UL[101:200], bv.mam.uci[101:200]),
lci = c(mc$Predicted_Summary$LL[101:200], bv.mam.lci[101:200]),
Method = rep(c("BMAM", "MAM"), each = 100))
dfplotM <- data.frame(time = rep(beaverspred$timeF[1:100],2),
fitted = c(mc$Predicted_Summary$M[1:100],bv.mam$mam$fitted[1:100]),
uci = c(mc$Predicted_Summary$UL[1:100], bv.mam.uci[1:100]),
lci = c(mc$Predicted_Summary$LL[1:100], bv.mam.lci[1:100]),
Method = rep(c("BMAM", "MAM"), each = 100))
## plot
ggF <- ggplot(data=dfplotF,aes(x=time,y=fitted, group=Method))+
geom_ribbon(aes(ymin=lci,ymax=uci,fill=Method, colour= Method),alpha=0.2, size = 0.3)+
geom_line(aes(colour = Method), size = 1)+
ylim(myrange)+
xlab("Day of Year")+
ylab(expression(f^M~(time)))+
ggtitle("Female") +
theme(text = element_text(size = GGPLOTTEXTSIZE))
ggF
ggM <- ggplot(data=dfplotM,aes(x=time,y=fitted, group=Method))+
geom_ribbon(aes(ymin=lci,ymax=uci,fill=Method, colour= Method),alpha=0.2, size = 0.3)+
geom_line(aes(colour = Method), size = 1)+
ylim(myrange)+
xlab("Day of Year")+
ylab(expression(f^M~(time)))+
ggtitle("Male") +
theme(text = element_text(size = GGPLOTTEXTSIZE))
ggM

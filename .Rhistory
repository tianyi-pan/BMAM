k=100, CIType="ETI", CI = 0.95)
plot(bmam)
data
object
object <- restructure(object)
prep <- prepare_predictions(
object, newdata = data, re_formula = NA,
check_response = FALSE)
## Xs: basis function for smooth term, without penalty (ncol = 1)
pred_Xs <- prep$dpars$mu$sm$fe$Xs
## Zs: basis function for smooth term (ncol = k-2)
pred_Zs <- sapply(prep$dpars$mu$sm$re, function(re.)re.$Zs)
pred_Zs <- do.call(cbind, pred_Zs)
## X: linear term, for example intercept + x1 + x2 + x1:x2
pred_X <- prep$dpars$mu$fe$X
pred_B <- cbind(pred_X, pred_Xs, pred_Zs)
## get beta from brms
## names of variables
post <- as_draws_matrix(object) # posterior samples
variables <- variables(object) # variable names
variables
namesX <- variables[grep(pattern = "b_ *", variables)]
namesXs <- variables[grep(pattern = paste0("bs_s *"), variables)]
namesZs <- variables[grep(pattern = paste0("zs_\\d_\\d *"), variables)]
namesZs
pred_Xs
colnames(pred_B)
namesXs
namesX
names <- c(namesX, namesXs, namesZs)
namesZs <- variables[grep(pattern = paste0("zs_\\d_\\d *"), variables)]
names <- c(namesX, namesXs, namesZs)
## beta
beta <- post[,names]
dim(beta)
t(beta)
Predicted <- pred_B %*% t(beta)
dim(Predicted)
## return
as.data.table(do.call(rbind, apply(Predicted, 1, bsummary, ...)))
### load packages #####################
library(mam)
library(mgcv)
library(gamm4)
library(tidyverse)
library(brms)
library(brmsmargins)
library(data.table)
source("R/bmam.R")
source("R/prediction.R")
source("R/generate_pred.R")
source("R/SimData.R")
source("R/summary.R")
source("R/plot.bmam.R")
source("R/conditional_brms.R")
### generate data #####################
### generate data #######################
set.seed(4321)
simdata <- SimData(100,10)
dat <- simdata$data
fun <- simdata$f
load("data/simu_brms.rds")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
bmam$Conditional$Predicted
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
Predicted
dim(Predicted)
object
dim(data)
data
centered
object <- restructure(object)
prep <- prepare_predictions(
object, newdata = data, re_formula = NA,
check_response = FALSE)
## Xs: basis function for smooth term, without penalty (ncol = 1)
pred_Xs <- prep$dpars$mu$sm$fe$Xs
## Zs: basis function for smooth term (ncol = k-2)
pred_Zs <- sapply(prep$dpars$mu$sm$re, function(re.)re.$Zs)
pred_Zs <- do.call(cbind, pred_Zs)
## X: linear term, for example intercept + x1 + x2 + x1:x2
pred_X <- prep$dpars$mu$fe$X
pred_B <- cbind(pred_X, pred_Xs, pred_Zs)
pred_B
dim(pred_B)
as_draws_matrix(object)
## get beta from brms
## names of variables
post <- as_draws_matrix(object) # posterior samples
variables <- variables(object) # variable names
namesX
namesXs
namesZs
namesXs
## beta
beta <- post[,names]
View(beta)
View(pred_B)
View(Predicted)
View(data)
object
object <- restructure(object)
object
as.data.table(do.call(rbind, apply(Predicted, 1, bsummary, ...)))
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
ss <- summary(bmam, display = F)
ss$Conditional_Model$Smooth
ss$Conditional_Model$Smooth
bmam$Conditional$Predicted
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
debugSource("~/Documents/Research/Bayesian MAM/BMAM/R/conditional_brms.R")
source("~/Documents/Research/Bayesian MAM/BMAM/R/conditional_brms.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
Predicted
View(beta)
as.data.table(do.call(rbind, apply(beta, 1, bsummary, ...)))
as.data.table(do.call(rbind, apply(beta, 2, bsummary, ...)))
as.data.table(do.call(rbind, apply(beta, 2, bsummary, ...)))
variables
namesZs <- variables[grep(pattern = paste0("s_s *"), variables)]
namesZs
namesZs <- variables[grep(pattern = paste0("^s_s *"), variables)]
namesZs
debugSource("~/Documents/Research/Bayesian MAM/BMAM/R/conditional_brms.R")
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
plot(bmam)
bmam
names1
names2<- variables[grep(pattern = paste0("zs_",as.character(i),"_\\d *"), variables)]
names2
variables[grep(pattern = paste0("^s_s *"), variables)]
as.character(smterm[[2]][[i+1]][[2]])
as.character(smterm[[2]][[i+1]][[2]])
source("~/Documents/Research/Bayesian MAM/BMAM/R/summary.R")
bmam
bmam
names2
names2<- variables[grep(pattern = paste0("^s_s",as.character(smterm[[2]][[i+1]][[2]]),"_\\d *"), variables)]
names2
source("~/Documents/Research/Bayesian MAM/BMAM/R/summary.R")
bmam
bmam
ss <- summary(bmam)
ss$Conditional_Model$Smooth
plot(bmam)
plot(bmam, smooth.function = fun)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
plot(bmam)
bmam$Centered
fun(preddat[[var]][index])
values <- 1:100
ones <- matrix(rep(1,nrow(values)))
nrow(values)
ones <- matrix(rep(1,length(values)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,nrow(pred_B)) - H_matrix
pred_B <- M_matrix %*% values
M_matrix <- diag(1,nrow(pred_B)) - H_matrix
ones <- matrix(rep(1,length(values)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,length(values)) - H_matrix
pred_B <- M_matrix %*% values
projection <- function(values){
if(x$Centered){
ones <- matrix(rep(1,length(values)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,length(values)) - H_matrix
pred_B <- M_matrix %*% values
}else{
values
}
}
## function for center the fitted value
projection <- function(values){
if(x$Centered){
ones <- matrix(rep(1,length(values)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,length(values)) - H_matrix
pred_B <- M_matrix %*% values
}else{
values
}
}
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam, smooth.function = fun)
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam, smooth.function = fun)
bmam$Centered
plot(bmam, smooth.function = fun)
plot(bmam)
bmam <- bmam(object = model_brms, centered = F,
k=100, CIType="ETI", CI = 0.95)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = F,
k=100, CIType="ETI", CI = 0.95)
plot(bmam)
plot(bmam, smooth.function = fun)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
bmam$Centered
center <- function(x){
if(bmam$Centered) x <- x - mean(x)
return(x)
}
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam)
plot(bmam, smooth.function = fun)
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam, smooth.function = fun)
source("~/Documents/Research/Bayesian MAM/BMAM/R/conditional_brms.R")
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2), smooths_only = TRUE,
...)
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2), smooths_only = TRUE）
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),
...)
CI《- 0.95
CI<- 0.95
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),
...)
dim(yhat)
# projection
# the same as  sweep(pred_B,2,colMeans(pred_B),'-')
ones <- matrix(rep(1,nrow(yhat)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,nrow(yhat)) - H_matrix
M_matrix %*% yhat
tmp1 <- M_matrix %*% yhat
object <- restructure(object)
prep <- prepare_predictions(
object, newdata = data, re_formula = NA,
check_response = FALSE)
## Xs: basis function for smooth term, without penalty (ncol = 1)
pred_Xs <- prep$dpars$mu$sm$fe$Xs
## Zs: basis function for smooth term (ncol = k-2)
pred_Zs <- sapply(prep$dpars$mu$sm$re, function(re.)re.$Zs)
pred_Zs <- do.call(cbind, pred_Zs)
## X: linear term, for example intercept + x1 + x2 + x1:x2
pred_X <- prep$dpars$mu$fe$X
pred_B <- cbind(pred_X, pred_Xs, pred_Zs)
if(centered) pred_B <- sweep(pred_B,2,colMeans(pred_B),'-') # Return centered smooths.
## get beta from brms
## names of variables
post <- as_draws_matrix(object) # posterior samples
variables <- variables(object) # variable names
namesX <- variables[grep(pattern = "b_ *", variables)]
namesXs <- variables[grep(pattern = paste0("bs_s *"), variables)]
namesZs <- variables[grep(pattern = paste0("^s_s *"), variables)]
names <- c(namesX, namesXs, namesZs)
## beta
beta <- post[,names]
tmp2 <- Predicted <- pred_B %*% t(beta)
debugSource("~/Documents/Research/Bayesian MAM/BMAM/R/conditional_brms.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
tmp1
M_matrix
tmp1 <- M_matrix %*% yhat
object <- restructure(object)
prep <- prepare_predictions(
object, newdata = data, re_formula = NA,
check_response = FALSE)
## Xs: basis function for smooth term, without penalty (ncol = 1)
pred_Xs <- prep$dpars$mu$sm$fe$Xs
## Zs: basis function for smooth term (ncol = k-2)
pred_Zs <- sapply(prep$dpars$mu$sm$re, function(re.)re.$Zs)
pred_Zs <- do.call(cbind, pred_Zs)
## X: linear term, for example intercept + x1 + x2 + x1:x2
pred_X <- prep$dpars$mu$fe$X
pred_B <- cbind(pred_X, pred_Xs, pred_Zs)
if(centered) pred_B <- sweep(pred_B,2,colMeans(pred_B),'-') # Return centered smooths.
centered
## get beta from brms
## names of variables
post <- as_draws_matrix(object) # posterior samples
variables <- variables(object) # variable names
namesX <- variables[grep(pattern = "b_ *", variables)]
namesXs <- variables[grep(pattern = paste0("bs_s *"), variables)]
namesZs <- variables[grep(pattern = paste0("^s_s *"), variables)]
names <- c(namesX, namesXs, namesZs)
## beta
beta <- post[,names]
tmp2 <- Predicted <- pred_B %*% t(beta)
View(tmp2)
View(tmp1)
tmp1 <- M_matrix %*% yhat
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),
...)
CI <- 0.95
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),
...)
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),
...)
CI <- 0.95
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),
...)
dim(yhat)
?fitted.brmsfit
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
CI <- 0.95
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),summary=FALSE,
...)
# projection
# the same as  sweep(pred_B,2,colMeans(pred_B),'-')
ones <- matrix(rep(1,nrow(yhat)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,nrow(yhat)) - H_matrix
tmp1 <- M_matrix %*% yhat
View(tmp1)
dim(tmp1)
predicted <- M_matrix %*% yhat
tmp1 <- as.data.table(do.call(rbind, apply(predicted, 1, bsummary, ...)))
object <- restructure(object)
prep <- prepare_predictions(
object, newdata = data, re_formula = NA,
check_response = FALSE)
## Xs: basis function for smooth term, without penalty (ncol = 1)
pred_Xs <- prep$dpars$mu$sm$fe$Xs
## Zs: basis function for smooth term (ncol = k-2)
pred_Zs <- sapply(prep$dpars$mu$sm$re, function(re.)re.$Zs)
pred_Zs <- do.call(cbind, pred_Zs)
## X: linear term, for example intercept + x1 + x2 + x1:x2
pred_X <- prep$dpars$mu$fe$X
pred_B <- cbind(pred_X, pred_Xs, pred_Zs)
centered
if(centered) pred_B <- sweep(pred_B,2,colMeans(pred_B),'-') # Return centered smooths.
object <- restructure(object)
prep <- prepare_predictions(
object, newdata = data, re_formula = NA,
check_response = FALSE)
## Xs: basis function for smooth term, without penalty (ncol = 1)
pred_Xs <- prep$dpars$mu$sm$fe$Xs
## Zs: basis function for smooth term (ncol = k-2)
pred_Zs <- sapply(prep$dpars$mu$sm$re, function(re.)re.$Zs)
pred_Zs <- do.call(cbind, pred_Zs)
## X: linear term, for example intercept + x1 + x2 + x1:x2
pred_X <- prep$dpars$mu$fe$X
pred_B <- cbind(pred_X, pred_Xs, pred_Zs)
pred_B <- sweep(pred_B,2,colMeans(pred_B),'-')
## get beta from brms
## names of variables
post <- as_draws_matrix(object) # posterior samples
variables <- variables(object) # variable names
namesX <- variables[grep(pattern = "b_ *", variables)]
namesXs <- variables[grep(pattern = paste0("bs_s *"), variables)]
namesZs <- variables[grep(pattern = paste0("^s_s *"), variables)]
names <- c(namesX, namesXs, namesZs)
## beta
beta <- post[,names]
Predicted <- pred_B %*% t(beta)
## return
tmp2 <- as.data.table(do.call(rbind, apply(Predicted, 1, bsummary, ...)))
View(tmp1)
View(tmp2)
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),summary=FALSE,
...)
# projection
# the same as  sweep(pred_B,2,colMeans(pred_B),'-')
ones <- matrix(rep(1,nrow(yhat)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,nrow(yhat)) - H_matrix
predicted <- M_matrix %*% yhat
tmp1 <- as.data.table(do.call(rbind, apply(predicted, 2, bsummary, ...)))
View(tmp1)
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),summary=FALSE,
...)
dim(yhat)
# projection
# the same as  sweep(pred_B,2,colMeans(pred_B),'-')
ones <- matrix(rep(1,nrow(yhat)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,nrow(yhat)) - H_matrix
dim(M_matrix)
nrow(yhat)
dim(yhat)
yhat <- fitted(
object = object, newdata = data,
re_formula = NA, scale = "linear",
probs =  abs(c(0,1) - (1-CI)/2),summary=FALSE,
...)
# projection
# the same as  sweep(pred_B,2,colMeans(pred_B),'-')
ones <- matrix(rep(1,ncol(yhat)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,ncol(yhat)) - H_matrix
predicted <- M_matrix %*% yhat
dim(yhat)
dim(M_matrix)
predicted <- M_matrix %*% t(yhat)
dim(predicted)
tmp1 <- as.data.table(do.call(rbind, apply(predicted, 2, bsummary, ...)))
dim(tmp1)
tmp1 <- as.data.table(do.call(rbind, apply(predicted, 1, bsummary, ...)))
View(tmp1)
View(tmp1)
source("~/Documents/Research/Bayesian MAM/BMAM/R/conditional_brms.R")
source("~/Documents/Research/Bayesian MAM/BMAM/R/conditional_brms.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
plot(bmam)
bmam <- bmam(object = model_brms, centered = F,
k=100, CIType="ETI", CI = 0.95)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = F,
k=100, CIType="ETI", CI = 0.95)
plot(bmam)
debugSource("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam, smooth.function = fun)
truevalue <- fun(preddat[[var]])
truevalue
bmam$Centered
bmam$Centered <- TRUE
# projection
ones <- matrix(rep(1,length(truevalue)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,length(truevalue)) - H_matrix
dim(truevalue)
M_matrix %*% t(truevalue)
truevalue <- M_matrix %*% truevalue
truevalue
debugSource("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
debugSource("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
undebug(plot.bmam)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam, smooth.function = fun)
plot(bmam, smooth.function = fun)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = F,
k=100, CIType="ETI", CI = 0.95)
plot(bmam, smooth.function = fun)
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
source("~/Documents/Research/Bayesian MAM/BMAM/R/bmam.R")
bmam <- bmam(object = model_brms, centered = T,
k=100, CIType="ETI", CI = 0.95)
plot(bmam,smooth.function = fun)
bmam$Centered
truevalue <- rnorm(100)
# projection
ones <- matrix(rep(1,length(truevalue)))
H_matrix <- ones %*% solve(t(ones) %*% ones) %*% t(ones)
M_matrix <- diag(1,length(truevalue)) - H_matrix
truevalue1 <- M_matrix %*% truevalue
View(truevalue)
truevalue - mean(truevalue)
truevalue1
truevalue1 - truevalue
mean(truevalue)
bmam$Centered
1||F
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam,smooth.function = fun)
source("~/Documents/Research/Bayesian MAM/BMAM/R/plot.bmam.R")
plot(bmam,smooth.function = fun)
